name: Push New Image

on:
  workflow_dispatch:
  push:
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.github/**'

env:
  IMAGE_REPO: wesdobry 
  IMAGE_NAME: ecl-ends-configuration-validator

jobs:
  Push-New-Image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-docker@v2
        with:
          version: '20.10.23'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set and Print Image Tag
        run: |
          if [ "${{ github.ref_name }}" == 'main' ]
          then
            echo "IMAGE_TAG=latest" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=${{ github.ref_name }}" >> $GITHUB_ENV
          fi
          echo "Branch: ${{ github.ref_name }}"
          echo "Image Tag: ${{ env.IMAGE_TAG }}"

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          cache-from: type=registry,ref=${{ env.IMAGE_REPO }}/${{ env.IMAGE_NAME }}:latest
          cache-to: type=inline
          provenance: mode=max
          tags: ${{ env.IMAGE_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Generate SBOM
        run: |
          docker sbom ${{ env.IMAGE_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            --format spdx-json > sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

      - name: Update Docker Hub Description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ env.IMAGE_REPO }}/${{ env.IMAGE_NAME }}
